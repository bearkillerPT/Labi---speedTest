from client import *
import random
import json
import csv
import time
import os
number_of_tests = 1  # int(argv[1])

def test_random_test():
    load_server()
    global number_of_tests
    for _ in range(number_of_tests):
        result = random_test()
        assert type(result) == SpeedTestResult
        assert len(result.getObjDict()) == 6

def test_country_test():
    load_server()
    global number_of_tests
    server_list = json.load(open("servers.json", 'r'))
    countries = list(dict.fromkeys([i['country'] for i in server_list['servers']]))
    for _ in range(number_of_tests):
        c_country = random.choice(countries)
        result = country_test(c_country)
        assert type(result) == SpeedTestResult
        assert [i for i in server_list['servers'] if i['id'] == result.server_id][0]['country'] == c_country
        assert len(result.getObjDict()) == 6

def test_id_test():
    load_server()
    global number_of_tests
    server_list = json.load(open("servers.json", 'r'))
    countries = list(([i['country'] for i in server_list['servers']]))
    for _ in range(number_of_tests):
        c_country = random.choice(countries)
        result = country_test(c_country)
        assert type(result) == SpeedTestResult
        assert len(result.getObjDict()) == 6

def test_report():
    load_server()
    global number_of_tests
    for _ in range(number_of_tests):
        test_list = [SpeedTestResult(random.randint(0, 50), float(random.randrange(10, 100)), random.randint(0, 10)) for _ in range(10)]
        report(test_list, "test_report.csv")
        reader = csv.DictReader(open("test_report.csv", 'r'))
        report_list = []
        for row in reader:
            report_list.append(row)
        keys = [i for i in report_list[random.randint(0, 10)]]
        assert keys == ["Contador", "Id Do Servidor", "Data e Hora no Formato ISO", "Latencia", "Largura de Banda", "Check"]
        c_test = random.randint(0, 9)
        assert len(report_list[c_test]) == 6

def test_calc_download():
    load_server()
    global number_of_tests
    server_list = json.load(open("servers.json", 'r'))
    ids = list(dict.fromkeys([i['id'] for i in server_list['servers']]))
    for _ in range(number_of_tests):
        result = calc_download(random.choice(server_list['servers']))
        assert 0 <= result <= 100
        assert type(result) == float

    result = calc_download({'host': ':'})
    assert result == 0

def test_calc_latency():
    load_server()
    global number_of_tests
    server_list = json.load(open("servers.json", 'r'))
    servers = list(([i for i in server_list['servers']]))
    for _ in range(number_of_tests):
        result = calc_latency(random.choice(servers))
        assert -1 <= result <= 1000
        assert type(result) == int

    result = calc_latency({'host': ':'})
    assert result == -1

    #result = calc_latency({})
    #assert result == -1

def test_run_test():
    load_server()
    global number_of_tests
    server_list = json.load(open("servers.json", 'r'))
    ids = list(dict.fromkeys([i['id'] for i in server_list['servers']]))
    for i in range(number_of_tests):
        r_interval = random.randrange(2, 5)
        r_num = random.randint(1, 5)
        r_id = random.choice(ids)
        s_time = time.time()
        result = run_tests(r_interval, r_num, r_id)
        e_time = time.time() - s_time

        assert e_time > r_interval * r_num
        assert type(result) == list
        assert type(result[random.randint(0, len(result)-1)]) == SpeedTestResult

def test_create_signed_document():
    for _ in range(number_of_tests):
        test_report()

        key = RSA.generate(1024)
        with open("test_key.priv", "wb") as fout:
            fout.write(key.publickey().exportKey())

        with open("test_key.public", "wb") as fout:
            fout.write(key.exportKey())

        create_signed_document("test_key.priv","test_report.csv","test_report.sig")


        with open("test_key.public", 'rb') as key_file:
            key = RSA.importKey(key_file.read())
        cipher = PKCS1_OAEP.new(key)

        with open("test_report.sig", 'rb') as rep:
            sign = rep.read()

        with open("test_report.csv", 'rb') as rep:
            original = rep.read()
        original = original.replace(b'\r', b'')
        decrypted = b""
        try:
            i = 0
            while (1):
                decrypted += (cipher.decrypt(sign[i * 128:(i + 1) * 128]))
                i += 1
        except:
            pass
        decrypted = decrypted.strip(b' ')
        assert len(decrypted) == len(original)
        for i in range(30):
            c_test = random.randrange(0, len(decrypted) - 1)
            assert (decrypted[c_test] == original[c_test])

def test_garbage_collect():
    """Deletes all secondary files generated by the tests"""
    os.remove("test_report.csv")
    os.remove("test_report.sig")
    os.remove("test_key.priv")
    os.remove("test_key.public")
